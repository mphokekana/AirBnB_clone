         sleep(0.05)         bm = BaseModel()     def test_two_saves(self):         self.assertLess(first_updated_at, bm.updated_at)         bm.save()         first_updated_at = bm.updated_at         sleep(0.05)         bm = BaseModel()     def test_one_save(self):             pass         except IOError:             os.rename("tmp", "file.json")         try:             pass         except IOError:             os.remove("file.json")         try:     def tearDown(self):     @classmethod             pass         except IOError:             os.rename("file.json", "tmp")         try:     def setUp(self):     @classmethod     """Unittests for testing save method of the BaseModel class.""" class TestBaseModel_save(unittest.TestCase):         self.assertEqual(bm.updated_at, dt)         self.assertEqual(bm.created_at, dt)         self.assertEqual(bm.id, "345")         bm = BaseModel("12", id="345", created_at=dt_iso, updated_at=dt_iso)         dt_iso = dt.isoformat()         dt = datetime.today()     def test_instantiation_with_args_and_kwargs(self):             BaseModel(id=None, created_at=None, updated_at=None)         with self.assertRaises(TypeError):     def test_instantiation_with_None_kwargs(self):         self.assertEqual(bm.updated_at, dt)         self.assertEqual(bm.created_at, dt)         self.assertEqual(bm.id, "345")         bm = BaseModel(id="345", created_at=dt_iso, updated_at=dt_iso)         dt_iso = dt.isoformat()         dt = datetime.today()     def test_instantiation_with_kwargs(self):         self.assertNotIn(None, bm.__dict__.values())         bm = BaseModel(None)     def test_args_unused(self):         self.assertIn("'updated_at': " + dt_repr, bmstr)         self.assertIn("'created_at': " + dt_repr, bmstr)         self.assertIn("'id': '123456'", bmstr)         self.assertIn("[BaseModel] (123456)", bmstr)         bmstr = bm.__str__()         bm.created_at = bm.updated_at = dt         bm.id = "123456"         bm = BaseModel()         dt_repr = repr(dt)         dt = datetime.today()     def test_str_representation(self):         self.assertLess(bm1.updated_at, bm2.updated_at)         bm2 = BaseModel()         sleep(0.05)         bm1 = BaseModel()     def test_two_models_different_updated_at(self):         self.assertLess(bm1.created_at, bm2.created_at)         bm2 = BaseModel()         sleep(0.05)         bm1 = BaseModel()     def test_two_models_different_created_at(self):         self.assertNotEqual(bm1.id, bm2.id)         bm2 = BaseModel()         bm1 = BaseModel()     def test_two_models_unique_ids(self):         self.assertEqual(datetime, type(BaseModel().updated_at))     def test_updated_at_is_public_datetime(self):         self.assertEqual(datetime, type(BaseModel().created_at))     def test_created_at_is_public_datetime(self):         self.assertEqual(str, type(BaseModel().id))     def test_id_is_public_str(self):         self.assertIn(BaseModel(), models.storage.all().values())     def test_new_instance_stored_in_objects(self):         self.assertEqual(BaseModel, type(BaseModel()))     def test_no_args_instantiates(self):

